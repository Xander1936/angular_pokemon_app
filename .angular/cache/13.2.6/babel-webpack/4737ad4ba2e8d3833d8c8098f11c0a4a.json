{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { catchError, of, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; // @Injectable({\n// On fournit notre pokemonService a \n// l'ensemble de l'application grace a l'injecteur racine 'root' a partir de privideIn.\n// providedIn: 'root'  \n// })\n\nexport let PokemonService = /*#__PURE__*/(() => {\n  class PokemonService {\n    constructor(http) {\n      this.http = http;\n    } // Observable<Pokemon[]> : On va retourner un flux qui contient un tableau de pokemons. \n\n\n    getPokemonList() {\n      // Le HttpClient renvoie des flux. 'api/pokemons' renvoie des pokemons.\n      return this.http.get('api/pokemons').pipe( // L'opérateur tap a la meme valeur que console.log() pour les Observables\n      tap(response => this.log(response)), catchError(error => this.handleError(error, [])));\n    }\n\n    getPokemonById(pokemonId) {\n      return this.http.get(`api/pokemons/${pokemonId}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, undefined))); // anciennement constante POKEMONS.find(pokemon => pokemon.id == pokemonId);\n    }\n\n    searchPokemonList(term) {\n      // L'utilisateur doit taper au moins 02 lettres \n      if (term.length <= 1) {\n        return of([]);\n      }\n\n      return this.http.get(`api/pokemons/?name=${term}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, [])));\n    }\n\n    updatePokemon(pokemon) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.put('api/pokemons', pokemon, httpOptions).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n    }\n\n    addPokemon(pokemon) {\n      const httpOptions = {\n        headers: new HttpHeaders({\n          'Content-Type': 'application/json'\n        })\n      };\n      return this.http.post('api/pokemons', pokemon, httpOptions).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n    }\n\n    deletePokemonById(pokemonId) {\n      return this.http.delete(`api/pokemons/${pokemonId}`).pipe(tap(response => this.log(response)), catchError(error => this.handleError(error, null)));\n    }\n\n    log(response) {\n      console.table(response);\n    } // On prend une error: du type Error \n    // et en 2nd parametre la valeur par defaut errorValue de type any car sa peut etre des donnees completement differentes.\n\n\n    handleError(error, errorValue) {\n      console.error(error);\n      return of(errorValue);\n    } // string[] veut dire \"retourne un tableau de chaines de caracteres\" \n\n\n    getPokemonTypeList() {\n      return ['Plante', 'Feu', 'Eau', 'Insecte', 'Normal', 'Electrik', 'Poison', 'Fée', 'Vol', 'Combat', 'Psy'];\n    }\n\n  }\n\n  PokemonService.ɵfac = function PokemonService_Factory(t) {\n    return new (t || PokemonService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  PokemonService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: PokemonService,\n    factory: PokemonService.ɵfac\n  });\n  return PokemonService;\n})();","map":null,"metadata":{},"sourceType":"module"}